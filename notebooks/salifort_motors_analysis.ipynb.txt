# Salifort Motors Project.

## PACE: Plan Stage

In this project, I am a data professional working for a fictional company called Salifort Motors.
Currently, there is a high rate of turnover among Salifort employees (this includes both employees who choose to quit their job and employees who are let go).
I have been tasked with building a machine learning model that could predict whether an employee will leave the company, and discover the reasons behind their departure. A good model will help the company increase retention and job satisfaction for current employees, and save money and time training new employees. This is meant to be built from a survey carried out by the HR department.
The survey data includes job title, department, number of projects, average monthly hours, and
any other relevant data points.
The dataset that Iâ€™ll be using in this lab contains 15,000 rows and 10 columns for the variables listed below.

### Step 1. Imports
```python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier, plot_importance
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, roc_auc_score, ConfusionMatrixDisplay, confusion_matrix, classification_report, RocCurveDisplay

```

### Step 2. Load dataset
```python
df0 = pd.read_csv("../data/HR_comma_sep.csv")
df0.head(10)
```

## PACE: Analyze Stage
### Step 2. Data Exploration (Initial EDA & Cleaning)
```python
df0.info()
df0.shape
df0.describe()
```
#### Rename columns
```python
df1 = df0.rename(columns={
    'Department': 'department',
    'promotion_last_5years': 'promotion',
    'satisfaction_level': 'satisfaction',
    'average_montly_hours': 'average_monthly_hours',
    'time_spend_company': 'tenure',
    'Work_accident': 'work_accident'
})
```
#### Missing values & duplicates
```python
df1.isnull().sum()
df1.duplicated().sum()
df2 = df1.drop_duplicates()
```
#### Outliers
```python
sns.boxplot(df2['tenure'])
percentile25 = df2['tenure'].quantile(0.25)
percentile75 = df2['tenure'].quantile(0.75)
iqr = percentile75 - percentile25
lower_limit = percentile25 - 1.5 * iqr
upper_limit = percentile75 + 1.5 * iqr
df2.shape
```

### Data Visualization
(Include all plots as per PDF: pie charts, histograms, bar plots, scatter plots, heatmaps, with identical parameters)

## PACE: Construct Stage
### Logistic Regression Model
(Replicate all Logistic Regression training, metrics, confusion matrix exactly as in PDF)

### Decision Tree Model
(Use same GridSearchCV parameters as PDF)

### Random Forest Model
(Use same GridSearchCV parameters as PDF)

## PACE: Execute Stage
### Results & Evaluation
- Present final metrics tables exactly as PDF
- Confusion matrix for Random Forest
- Feature importance plot for Random Forest

## Recommendations
(Exact wording from PDF conclusions & recommendations)
