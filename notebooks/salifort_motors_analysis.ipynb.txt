{
  "notebooks/salifort_motors_analysis.ipynb": {
    "content": "# Salifort Motors: Employee Turnover Prediction Notebook\n\n## Plan Stage\n### 1. Import Libraries\n```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, ConfusionMatrixDisplay, confusion_matrix, classification_report\n```\n\n### 2. Load Dataset\n```python\ndf = pd.read_csv('../data/HR_comma_sep.csv')\ndf.head()\n```\n\n---\n## Analyze Stage\n### 1. Data Cleaning\n```python\ndf.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')\ndf.drop_duplicates(inplace=True)\n```\n\n### 2. Exploratory Data Analysis\n- Distribution plots (satisfaction, evaluation, projects, etc.)\n- Correlation heatmap\n- Insights noted after each visualization\n\n---\n## Construct Stage\n### 1. Feature Engineering\n```python\nX = pd.get_dummies(df.drop('left', axis=1), drop_first=True)\ny = df['left']\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.25, random_state=42)\n```\n\n### 2. Modeling\n- Logistic Regression\n- Decision Tree (GridSearchCV)\n- Random Forest (GridSearchCV)\n\nPerformance results summarized in a dataframe\n\n---\n## Execute Stage\n### 1. Champion Model: Random Forest\n- Confusion matrix\n- Feature importance barplot\n\n### 2. Recommendations\n- Reduce overtime\n- Balance projects\n- Increase promotions\n- Focus retention efforts early in tenure\n"
  },
  "requirements.txt": {
    "content": "pandas\nnumpy\nmatplotlib\nseaborn\nscikit-learn\nxgboost\npickle-mixin"
  }
}
